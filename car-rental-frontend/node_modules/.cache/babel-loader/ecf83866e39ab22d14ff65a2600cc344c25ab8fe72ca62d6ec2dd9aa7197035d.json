{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\bike-rental\\\\car-rental-frontend\\\\src\\\\components\\\\MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapComponent({\n  cars,\n  selectedCar,\n  stations\n}) {\n  _s();\n  const mapRef = useRef(null); // Khởi tạo ref để tham chiếu đến phần tử div chứa bản đồ\n  const [map, setMap] = useState(null); // Lưu trữ đối tượng bản đồ khi đã khởi tạo\n  const carMarkersRef = useRef([]); // Lưu trữ các marker của xe\n  const stationMarkersRef = useRef([]); // Lưu trữ các marker của trạm\n\n  useEffect(() => {\n    // Tạo bản đồ nếu chưa được khởi tạo\n    const newMap = L.map(mapRef.current).setView([21.0285, 105.8542], 13); // Vị trí Hà Nội\n\n    // Thêm lớp bản đồ OpenStreetMap\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(newMap);\n\n    // Lưu đối tượng bản đồ vào state\n    setMap(newMap);\n\n    // Cleanup function để loại bỏ bản đồ khi component bị hủy\n    return () => {\n      newMap.remove();\n    };\n  }, []); // Chạy 1 lần khi component mount\n\n  // Cập nhật các marker của xe\n  useEffect(() => {\n    if (map && cars) {\n      // Xóa các marker cũ trước khi thêm mới\n      carMarkersRef.current.forEach(marker => marker.remove());\n      carMarkersRef.current = []; // Reset lại mảng markers\n\n      // Thêm tất cả các marker cho các xe trên bản đồ\n      cars.forEach(car => {\n        const {\n          location,\n          brand,\n          model,\n          available\n        } = car;\n        const {\n          latitude,\n          longitude\n        } = location;\n\n        // Kiểm tra nếu latitude và longitude hợp lệ\n        if (latitude && longitude && !isNaN(latitude) && !isNaN(longitude)) {\n          const popupContent = `\n            <b>${brand} ${model}</b><br />\n            Latitude: ${latitude}<br />\n            Longitude: ${longitude}<br />\n            Trạng thái: ${available ? 'Còn sẵn' : 'Đã thuê'}\n          `;\n          const marker = L.marker([latitude, longitude]).addTo(map).bindPopup(popupContent);\n          carMarkersRef.current.push(marker); // Lưu trữ marker\n        }\n      });\n    }\n  }, [map, cars]); // Cập nhật khi bản đồ hoặc danh sách xe thay đổi\n\n  // Cập nhật các marker của trạm\n  useEffect(() => {\n    if (map && stations) {\n      // Xóa các marker cũ trước khi thêm mới\n      stationMarkersRef.current.forEach(marker => marker.remove());\n      stationMarkersRef.current = []; // Reset lại mảng markers\n\n      // Thêm tất cả các marker cho các trạm trên bản đồ\n      stations.forEach(station => {\n        const {\n          name,\n          location\n        } = station;\n        const {\n          latitude,\n          longitude\n        } = location;\n\n        // Kiểm tra nếu latitude và longitude hợp lệ\n        if (latitude && longitude && !isNaN(latitude) && !isNaN(longitude)) {\n          const popupContent = `\n            <b>${name}</b><br />\n            Latitude: ${latitude}<br />\n            Longitude: ${longitude}\n          `;\n          const marker = L.marker([latitude, longitude], {\n            icon: L.icon({\n              iconUrl: 'https://cdn-icons-png.flaticon.com/512/684/684908.png',\n              // URL đến icon của station\n              iconSize: [25, 25] // Kích thước icon\n            })\n          }).addTo(map).bindPopup(popupContent);\n          stationMarkersRef.current.push(marker); // Lưu trữ marker\n        }\n      });\n    }\n  }, [map, stations]); // Cập nhật khi bản đồ hoặc danh sách trạm thay đổi\n\n  // Cập nhật khi xe được chọn\n  useEffect(() => {\n    if (map && selectedCar) {\n      const {\n        location,\n        brand,\n        model,\n        available\n      } = selectedCar;\n      const {\n        latitude,\n        longitude\n      } = location;\n\n      // Kiểm tra nếu latitude và longitude hợp lệ\n      if (latitude && longitude && !isNaN(latitude) && !isNaN(longitude)) {\n        const popupContent = `\n          <b>${brand} ${model}</b><br />\n          Latitude: ${latitude}<br />\n          Longitude: ${longitude}<br />\n          Trạng thái: ${available ? 'Còn sẵn' : 'Đã thuê'}\n        `;\n\n        // Tạo marker cho xe được chọn và di chuyển bản đồ đến vị trí của xe\n        const selectedMarker = L.marker([latitude, longitude]).addTo(map).bindPopup(popupContent).openPopup();\n\n        // Di chuyển bản đồ đến vị trí của xe\n        map.setView([latitude, longitude], 13);\n      }\n    }\n  }, [map, selectedCar]); // Cập nhật khi xe được chọn\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    ref: mapRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 10\n  }, this);\n}\n_s(MapComponent, \"RdPR7CctJbdy1vo0061u5rbhnhY=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","jsxDEV","_jsxDEV","MapComponent","cars","selectedCar","stations","_s","mapRef","map","setMap","carMarkersRef","stationMarkersRef","newMap","current","setView","tileLayer","attribution","addTo","remove","forEach","marker","car","location","brand","model","available","latitude","longitude","isNaN","popupContent","bindPopup","push","station","name","icon","iconUrl","iconSize","selectedMarker","openPopup","id","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/admin/bike-rental/car-rental-frontend/src/components/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport L from \"leaflet\";\r\n\r\nfunction MapComponent({ cars, selectedCar, stations }) {\r\n  const mapRef = useRef(null); // Khởi tạo ref để tham chiếu đến phần tử div chứa bản đồ\r\n  const [map, setMap] = useState(null); // Lưu trữ đối tượng bản đồ khi đã khởi tạo\r\n  const carMarkersRef = useRef([]); // Lưu trữ các marker của xe\r\n  const stationMarkersRef = useRef([]); // Lưu trữ các marker của trạm\r\n\r\n  useEffect(() => {\r\n    // Tạo bản đồ nếu chưa được khởi tạo\r\n    const newMap = L.map(mapRef.current).setView([21.0285, 105.8542], 13); // Vị trí Hà Nội\r\n\r\n    // Thêm lớp bản đồ OpenStreetMap\r\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n      attribution:\r\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n    }).addTo(newMap);\r\n\r\n    // Lưu đối tượng bản đồ vào state\r\n    setMap(newMap);\r\n\r\n    // Cleanup function để loại bỏ bản đồ khi component bị hủy\r\n    return () => {\r\n      newMap.remove();\r\n    };\r\n  }, []); // Chạy 1 lần khi component mount\r\n\r\n  // Cập nhật các marker của xe\r\n  useEffect(() => {\r\n    if (map && cars) {\r\n      // Xóa các marker cũ trước khi thêm mới\r\n      carMarkersRef.current.forEach((marker) => marker.remove());\r\n      carMarkersRef.current = []; // Reset lại mảng markers\r\n\r\n      // Thêm tất cả các marker cho các xe trên bản đồ\r\n      cars.forEach((car) => {\r\n        const { location, brand, model, available } = car;\r\n        const { latitude, longitude } = location;\r\n\r\n        // Kiểm tra nếu latitude và longitude hợp lệ\r\n        if (latitude && longitude && !isNaN(latitude) && !isNaN(longitude)) {\r\n          const popupContent = `\r\n            <b>${brand} ${model}</b><br />\r\n            Latitude: ${latitude}<br />\r\n            Longitude: ${longitude}<br />\r\n            Trạng thái: ${available ? 'Còn sẵn' : 'Đã thuê'}\r\n          `;\r\n\r\n          const marker = L.marker([latitude, longitude])\r\n            .addTo(map)\r\n            .bindPopup(popupContent);\r\n\r\n          carMarkersRef.current.push(marker); // Lưu trữ marker\r\n        }\r\n      });\r\n    }\r\n  }, [map, cars]); // Cập nhật khi bản đồ hoặc danh sách xe thay đổi\r\n\r\n  // Cập nhật các marker của trạm\r\n  useEffect(() => {\r\n    if (map && stations) {\r\n      // Xóa các marker cũ trước khi thêm mới\r\n      stationMarkersRef.current.forEach((marker) => marker.remove());\r\n      stationMarkersRef.current = []; // Reset lại mảng markers\r\n\r\n      // Thêm tất cả các marker cho các trạm trên bản đồ\r\n      stations.forEach((station) => {\r\n        const { name, location } = station;\r\n        const { latitude, longitude } = location;\r\n\r\n        // Kiểm tra nếu latitude và longitude hợp lệ\r\n        if (latitude && longitude && !isNaN(latitude) && !isNaN(longitude)) {\r\n          const popupContent = `\r\n            <b>${name}</b><br />\r\n            Latitude: ${latitude}<br />\r\n            Longitude: ${longitude}\r\n          `;\r\n\r\n          const marker = L.marker([latitude, longitude], { icon: L.icon({\r\n            iconUrl: 'https://cdn-icons-png.flaticon.com/512/684/684908.png', // URL đến icon của station\r\n            iconSize: [25, 25], // Kích thước icon\r\n          })})\r\n            .addTo(map)\r\n            .bindPopup(popupContent);\r\n\r\n          stationMarkersRef.current.push(marker); // Lưu trữ marker\r\n        }\r\n      });\r\n    }\r\n  }, [map, stations]); // Cập nhật khi bản đồ hoặc danh sách trạm thay đổi\r\n\r\n  // Cập nhật khi xe được chọn\r\n  useEffect(() => {\r\n    if (map && selectedCar) {\r\n      const { location, brand, model, available } = selectedCar;\r\n      const { latitude, longitude } = location;\r\n\r\n      // Kiểm tra nếu latitude và longitude hợp lệ\r\n      if (latitude && longitude && !isNaN(latitude) && !isNaN(longitude)) {\r\n        const popupContent = `\r\n          <b>${brand} ${model}</b><br />\r\n          Latitude: ${latitude}<br />\r\n          Longitude: ${longitude}<br />\r\n          Trạng thái: ${available ? 'Còn sẵn' : 'Đã thuê'}\r\n        `;\r\n\r\n        // Tạo marker cho xe được chọn và di chuyển bản đồ đến vị trí của xe\r\n        const selectedMarker = L.marker([latitude, longitude])\r\n          .addTo(map)\r\n          .bindPopup(popupContent)\r\n          .openPopup();\r\n\r\n        // Di chuyển bản đồ đến vị trí của xe\r\n        map.setView([latitude, longitude], 13);\r\n      }\r\n    }\r\n  }, [map, selectedCar]); // Cập nhật khi xe được chọn\r\n\r\n  return <div id=\"map\" ref={mapRef} style={{ width: \"100%\", height: \"100%\" }}></div>;\r\n}\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}