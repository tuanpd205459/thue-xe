{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\bike-rental\\\\car-rental-frontend\\\\src\\\\components\\\\MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapComponent({\n  cars,\n  selectedCar\n}) {\n  _s();\n  const mapRef = useRef(null); // Khởi tạo ref để tham chiếu đến phần tử div chứa bản đồ\n  const [map, setMap] = useState(null); // Lưu trữ đối tượng bản đồ khi đã khởi tạo\n  const markersRef = useRef([]); // Lưu trữ các marker để loại bỏ khi cần\n\n  useEffect(() => {\n    // Tạo bản đồ nếu chưa được khởi tạo\n    const newMap = L.map(mapRef.current).setView([21.0285, 105.8542], 13); // Vị trí Hà Nội\n\n    // Thêm lớp bản đồ OpenStreetMap\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(newMap);\n\n    // Lưu đối tượng bản đồ vào state\n    setMap(newMap);\n\n    // Cleanup function để loại bỏ bản đồ khi component bị hủy\n    return () => {\n      newMap.remove();\n    };\n  }, []); // Chạy 1 lần khi component mount\n\n  useEffect(() => {\n    if (map && cars) {\n      // Xóa các marker cũ trước khi thêm mới\n      markersRef.current.forEach(marker => marker.remove());\n      markersRef.current = []; // Reset lại mảng markers\n\n      // Thêm tất cả các marker cho các xe trên bản đồ\n      cars.forEach(car => {\n        const {\n          lat,\n          lng,\n          brand,\n          model\n        } = car;\n\n        // Kiểm tra nếu lat và lng hợp lệ\n        if (lat && lng && !isNaN(lat) && !isNaN(lng)) {\n          const popupContent = `<b>${brand} ${model}</b><br />Latitude: ${lat}<br />Longitude: ${lng}`;\n          const marker = L.marker([lat, lng]).addTo(map).bindPopup(popupContent);\n          markersRef.current.push(marker); // Lưu trữ marker\n        }\n      });\n    }\n  }, [map, cars]); // Cập nhật khi bản đồ hoặc danh sách xe thay đổi\n\n  useEffect(() => {\n    if (map && selectedCar) {\n      const {\n        lat,\n        lng,\n        brand,\n        model\n      } = selectedCar;\n\n      // Kiểm tra nếu lat và lng hợp lệ\n      if (lat && lng && !isNaN(lat) && !isNaN(lng)) {\n        const popupContent = `<b>${brand} ${model}</b><br />Latitude: ${lat}<br />Longitude: ${lng}`;\n\n        // Tạo marker cho xe được chọn và di chuyển bản đồ đến vị trí của xe\n        const selectedMarker = L.marker([lat, lng]).addTo(map).bindPopup(popupContent).openPopup();\n\n        // Di chuyển bản đồ đến vị trí của xe\n        map.setView([lat, lng], 13);\n      }\n    }\n  }, [map, selectedCar]); // Cập nhật khi xe được chọn\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    ref: mapRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 10\n  }, this);\n}\n_s(MapComponent, \"MCC5UFJFiXpdEDglPcwDHDKZVGI=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","jsxDEV","_jsxDEV","MapComponent","cars","selectedCar","_s","mapRef","map","setMap","markersRef","newMap","current","setView","tileLayer","attribution","addTo","remove","forEach","marker","car","lat","lng","brand","model","isNaN","popupContent","bindPopup","push","selectedMarker","openPopup","id","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/admin/bike-rental/car-rental-frontend/src/components/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport L from \"leaflet\";\r\n\r\nfunction MapComponent({ cars, selectedCar }) {\r\n  const mapRef = useRef(null); // Khởi tạo ref để tham chiếu đến phần tử div chứa bản đồ\r\n  const [map, setMap] = useState(null); // Lưu trữ đối tượng bản đồ khi đã khởi tạo\r\n  const markersRef = useRef([]); // Lưu trữ các marker để loại bỏ khi cần\r\n\r\n  useEffect(() => {\r\n    // Tạo bản đồ nếu chưa được khởi tạo\r\n    const newMap = L.map(mapRef.current).setView([21.0285, 105.8542], 13); // Vị trí Hà Nội\r\n\r\n    // Thêm lớp bản đồ OpenStreetMap\r\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n      attribution:\r\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n    }).addTo(newMap);\r\n\r\n    // Lưu đối tượng bản đồ vào state\r\n    setMap(newMap);\r\n\r\n    // Cleanup function để loại bỏ bản đồ khi component bị hủy\r\n    return () => {\r\n      newMap.remove();\r\n    };\r\n  }, []); // Chạy 1 lần khi component mount\r\n\r\n  useEffect(() => {\r\n    if (map && cars) {\r\n      // Xóa các marker cũ trước khi thêm mới\r\n      markersRef.current.forEach((marker) => marker.remove());\r\n      markersRef.current = []; // Reset lại mảng markers\r\n\r\n      // Thêm tất cả các marker cho các xe trên bản đồ\r\n      cars.forEach((car) => {\r\n        const { lat, lng, brand, model } = car;\r\n\r\n        // Kiểm tra nếu lat và lng hợp lệ\r\n        if (lat && lng && !isNaN(lat) && !isNaN(lng)) {\r\n          const popupContent = `<b>${brand} ${model}</b><br />Latitude: ${lat}<br />Longitude: ${lng}`;\r\n\r\n          const marker = L.marker([lat, lng])\r\n            .addTo(map)\r\n            .bindPopup(popupContent);\r\n\r\n          markersRef.current.push(marker); // Lưu trữ marker\r\n        }\r\n      });\r\n    }\r\n  }, [map, cars]); // Cập nhật khi bản đồ hoặc danh sách xe thay đổi\r\n\r\n  useEffect(() => {\r\n    if (map && selectedCar) {\r\n      const { lat, lng, brand, model } = selectedCar;\r\n\r\n      // Kiểm tra nếu lat và lng hợp lệ\r\n      if (lat && lng && !isNaN(lat) && !isNaN(lng)) {\r\n        const popupContent = `<b>${brand} ${model}</b><br />Latitude: ${lat}<br />Longitude: ${lng}`;\r\n\r\n        // Tạo marker cho xe được chọn và di chuyển bản đồ đến vị trí của xe\r\n        const selectedMarker = L.marker([lat, lng])\r\n          .addTo(map)\r\n          .bindPopup(popupContent)\r\n          .openPopup();\r\n\r\n        // Di chuyển bản đồ đến vị trí của xe\r\n        map.setView([lat, lng], 13); \r\n      }\r\n    }\r\n  }, [map, selectedCar]); // Cập nhật khi xe được chọn\r\n\r\n  return <div id=\"map\" ref={mapRef} style={{ width: \"100%\", height: \"100%\" }}></div>;\r\n}\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}